
GCC-RTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000029e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000000ba  00800060  00800060  00000312  2**0
                  ALLOC
  2 .debug_aranges 00000080  00000000  00000000  00000312  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000cc  00000000  00000000  00000392  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003f3  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001f8  00000000  00000000  00000851  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003f8  00000000  00000000  00000a49  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e0  00000000  00000000  00000e44  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000017e  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000a4  00000000  00000000  000010a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 31       	cpi	r26, 0x1A	; 26
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 4d 01 	jmp	0x29a	; 0x29a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:


//==============================================================================
int main(void)
{
InitAll();			// Инициализируем периферию
  7c:	0e 94 31 01 	call	0x262	; 0x262 <InitAll>
InitRTOS();			// Инициализируем ядро
  80:	0e 94 6d 00 	call	0xda	; 0xda <InitRTOS>
RunRTOS();			// Старт ядра. 
  84:	0e 94 43 01 	call	0x286	; 0x286 <RunRTOS>

while(1) 		// Главный цикл диспетчера
{
wdt_reset();	// Сброс собачьего таймера
  88:	a8 95       	wdr
TaskManager();	// Вызов диспетчера
  8a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <TaskManager>
  8e:	fc cf       	rjmp	.-8      	; 0x88 <main+0xc>

00000090 <__vector_3>:



//RTOS Interrupt
ISR(RTOS_ISR)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	4f 93       	push	r20
  a0:	5f 93       	push	r21
  a2:	6f 93       	push	r22
  a4:	7f 93       	push	r23
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
  aa:	af 93       	push	r26
  ac:	bf 93       	push	r27
  ae:	ef 93       	push	r30
  b0:	ff 93       	push	r31
sei();
  b2:	78 94       	sei
TimerService();						// Прерывание ядра диспетчера
  b4:	0e 94 0b 01 	call	0x216	; 0x216 <TimerService>
}
  b8:	ff 91       	pop	r31
  ba:	ef 91       	pop	r30
  bc:	bf 91       	pop	r27
  be:	af 91       	pop	r26
  c0:	9f 91       	pop	r25
  c2:	8f 91       	pop	r24
  c4:	7f 91       	pop	r23
  c6:	6f 91       	pop	r22
  c8:	5f 91       	pop	r21
  ca:	4f 91       	pop	r20
  cc:	3f 91       	pop	r19
  ce:	2f 91       	pop	r18
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <InitRTOS>:
						MainTimer[MainTimerQueueSize+1];	// Очередь таймеров


// RTOS Подготовка. Очистка очередей
inline void InitRTOS(void)
{
  da:	e0 e6       	ldi	r30, 0x60	; 96
  dc:	f0 e0       	ldi	r31, 0x00	; 0
u08	index;

for(index=0;index!=TaskQueueSize+1;index++)	// Во все позиции записываем Idle
	{
	TaskQueue[index] = Idle;
  de:	85 e8       	ldi	r24, 0x85	; 133
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	81 93       	st	Z+, r24
  e4:	91 93       	st	Z+, r25
// RTOS Подготовка. Очистка очередей
inline void InitRTOS(void)
{
u08	index;

for(index=0;index!=TaskQueueSize+1;index++)	// Во все позиции записываем Idle
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	ee 39       	cpi	r30, 0x9E	; 158
  ea:	f2 07       	cpc	r31, r18
  ec:	d1 f7       	brne	.-12     	; 0xe2 <InitRTOS+0x8>
  ee:	ee e9       	ldi	r30, 0x9E	; 158
  f0:	f0 e0       	ldi	r31, 0x00	; 0
	}


for(index=0;index!=MainTimerQueueSize+1;index++) // Обнуляем все таймеры.
	{
	MainTimer[index].GoToTask = Idle;
  f2:	28 2f       	mov	r18, r24
  f4:	89 2f       	mov	r24, r25
  f6:	20 83       	st	Z, r18
  f8:	81 83       	std	Z+1, r24	; 0x01
	MainTimer[index].Time = 0;
  fa:	13 82       	std	Z+3, r1	; 0x03
  fc:	12 82       	std	Z+2, r1	; 0x02
  fe:	34 96       	adiw	r30, 0x04	; 4
	{
	TaskQueue[index] = Idle;
	}


for(index=0;index!=MainTimerQueueSize+1;index++) // Обнуляем все таймеры.
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	ea 31       	cpi	r30, 0x1A	; 26
 104:	f9 07       	cpc	r31, r25
 106:	b9 f7       	brne	.-18     	; 0xf6 <InitRTOS+0x1c>
	{
	MainTimer[index].GoToTask = Idle;
	MainTimer[index].Time = 0;
	}
}
 108:	08 95       	ret

0000010a <Idle>:

//Пустая процедура - простой ядра. 
inline void  Idle(void)
{

}
 10a:	08 95       	ret

0000010c <SetTask>:


// Функция установки задачи в очередь. Передаваемый параметр - указатель на функцию
// Отдаваемое значение - код ошибки.
void SetTask(TPTR TS)
{
 10c:	ac 01       	movw	r20, r24

u08		index = 0;
u08		nointerrupted = 0;

if (STATUS_REG & (1<<Interrupt_Flag))  // Если прерывания разрешены, то запрещаем их.
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	07 fe       	sbrs	r0, 7
 112:	0c c0       	rjmp	.+24     	; 0x12c <SetTask+0x20>
	{
	Disable_Interrupt
 114:	f8 94       	cli
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	0a c0       	rjmp	.+20     	; 0x12e <SetTask+0x22>
 11a:	31 96       	adiw	r30, 0x01	; 1
 11c:	12 96       	adiw	r26, 0x02	; 2
	}

while(TaskQueue[index]!=Idle) 			// Прочесываем очередь задач на предмет свободной ячейки
	{									// с значением Idle - конец очереди.
	index++;
	if (index==TaskQueueSize+1) 		// Если очередь переполнена то выходим не солоно хлебавши
 11e:	ef 31       	cpi	r30, 0x1F	; 31
 120:	f1 05       	cpc	r31, r1
 122:	49 f4       	brne	.+18     	; 0x136 <SetTask+0x2a>
		{
		if (nointerrupted)	Enable_Interrupt 	// Если мы не в прерывании, то разрешаем прерывания
 124:	22 23       	and	r18, r18
 126:	b1 f0       	breq	.+44     	; 0x154 <SetTask+0x48>
 128:	78 94       	sei
 12a:	08 95       	ret
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	a0 e6       	ldi	r26, 0x60	; 96
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	e0 e0       	ldi	r30, 0x00	; 0
 134:	f0 e0       	ldi	r31, 0x00	; 0
	{
	Disable_Interrupt
	nointerrupted = 1;					// И ставим флаг, что мы не в прерывании. 
	}

while(TaskQueue[index]!=Idle) 			// Прочесываем очередь задач на предмет свободной ячейки
 136:	8d 91       	ld	r24, X+
 138:	9c 91       	ld	r25, X
 13a:	11 97       	sbiw	r26, 0x01	; 1
 13c:	85 58       	subi	r24, 0x85	; 133
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	61 f7       	brne	.-40     	; 0x11a <SetTask+0xe>
		if (nointerrupted)	Enable_Interrupt 	// Если мы не в прерывании, то разрешаем прерывания
		return;									// Раньше функция возвращала код ошибки - очередь переполнена. Пока убрал.
		}
	}
												// Если нашли свободное место, то
TaskQueue[index] = TS;							// Записываем в очередь задачу
 142:	ee 0f       	add	r30, r30
 144:	ff 1f       	adc	r31, r31
 146:	e0 5a       	subi	r30, 0xA0	; 160
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	51 83       	std	Z+1, r21	; 0x01
 14c:	40 83       	st	Z, r20
if (nointerrupted) Enable_Interrupt				// И включаем прерывания если не в обработчике прерывания.
 14e:	22 23       	and	r18, r18
 150:	09 f0       	breq	.+2      	; 0x154 <SetTask+0x48>
 152:	78 94       	sei
 154:	08 95       	ret

00000156 <SetTimerTask>:


//Функция установки задачи по таймеру. Передаваемые параметры - указатель на функцию, 
// Время выдержки в тиках системного таймера. Возвращет код ошибки.
void SetTimerTask(TPTR TS, u16 NewTime)
{
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	ac 01       	movw	r20, r24
u08		index = 0;
u08		nointerrupted = 0;
u08		Idle_i = 0;

if (STATUS_REG & (1<<Interrupt_Flag)) 			// Проверка запрета прерывания, аналогично функции выше
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	07 fc       	sbrc	r0, 7
 160:	02 c0       	rjmp	.+4      	; 0x166 <SetTimerTask+0x10>
 162:	20 e0       	ldi	r18, 0x00	; 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <SetTimerTask+0x14>
	{
	Disable_Interrupt
 166:	f8 94       	cli
 168:	21 e0       	ldi	r18, 0x01	; 1
 16a:	ce e9       	ldi	r28, 0x9E	; 158
 16c:	d0 e0       	ldi	r29, 0x00	; 0
 16e:	de 01       	movw	r26, r28
 170:	e0 e0       	ldi	r30, 0x00	; 0
 172:	f0 e0       	ldi	r31, 0x00	; 0
	}


for(index=0;index!=MainTimerQueueSize+1;++index)	//Прочесываем очередь таймеров
	{
	if(MainTimer[index].GoToTask == TS)				// Если уже есть запись с таким адресом
 174:	8d 91       	ld	r24, X+
 176:	9c 91       	ld	r25, X
 178:	11 97       	sbiw	r26, 0x01	; 1
 17a:	84 17       	cp	r24, r20
 17c:	95 07       	cpc	r25, r21
 17e:	61 f4       	brne	.+24     	; 0x198 <SetTimerTask+0x42>
		{
		MainTimer[index].Time = NewTime;			// Перезаписываем ей выдержку
 180:	ee 0f       	add	r30, r30
 182:	ff 1f       	adc	r31, r31
 184:	ee 0f       	add	r30, r30
 186:	ff 1f       	adc	r31, r31
 188:	e2 56       	subi	r30, 0x62	; 98
 18a:	ff 4f       	sbci	r31, 0xFF	; 255
 18c:	73 83       	std	Z+3, r23	; 0x03
 18e:	62 83       	std	Z+2, r22	; 0x02
		if (nointerrupted) 	Enable_Interrupt		// Разрешаем прерывания если не были запрещены.
 190:	22 23       	and	r18, r18
 192:	09 f1       	breq	.+66     	; 0x1d6 <SetTimerTask+0x80>
 194:	78 94       	sei
 196:	1f c0       	rjmp	.+62     	; 0x1d6 <SetTimerTask+0x80>
 198:	31 96       	adiw	r30, 0x01	; 1
 19a:	14 96       	adiw	r26, 0x04	; 4
	Disable_Interrupt
	nointerrupted = 1;
	}


for(index=0;index!=MainTimerQueueSize+1;++index)	//Прочесываем очередь таймеров
 19c:	ef 31       	cpi	r30, 0x1F	; 31
 19e:	f1 05       	cpc	r31, r1
 1a0:	49 f7       	brne	.-46     	; 0x174 <SetTimerTask+0x1e>
 1a2:	e0 e0       	ldi	r30, 0x00	; 0
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
	}
	

for(index=0;index!=MainTimerQueueSize+1;++index)	// Если не находим похожий таймер, то ищем любой пустой	
	{
	if (MainTimer[index].GoToTask == Idle)		
 1a6:	88 81       	ld	r24, Y
 1a8:	99 81       	ldd	r25, Y+1	; 0x01
 1aa:	85 58       	subi	r24, 0x85	; 133
 1ac:	90 40       	sbci	r25, 0x00	; 0
 1ae:	71 f4       	brne	.+28     	; 0x1cc <SetTimerTask+0x76>
		{
		MainTimer[index].GoToTask = TS;			// Заполняем поле перехода задачи
 1b0:	ee 0f       	add	r30, r30
 1b2:	ff 1f       	adc	r31, r31
 1b4:	ee 0f       	add	r30, r30
 1b6:	ff 1f       	adc	r31, r31
 1b8:	e2 56       	subi	r30, 0x62	; 98
 1ba:	ff 4f       	sbci	r31, 0xFF	; 255
 1bc:	51 83       	std	Z+1, r21	; 0x01
 1be:	40 83       	st	Z, r20
		MainTimer[index].Time = NewTime;		// И поле выдержки времени
 1c0:	73 83       	std	Z+3, r23	; 0x03
 1c2:	62 83       	std	Z+2, r22	; 0x02
		if (nointerrupted) 	Enable_Interrupt	// Разрешаем прерывания
 1c4:	22 23       	and	r18, r18
 1c6:	39 f0       	breq	.+14     	; 0x1d6 <SetTimerTask+0x80>
 1c8:	78 94       	sei
 1ca:	05 c0       	rjmp	.+10     	; 0x1d6 <SetTimerTask+0x80>
 1cc:	31 96       	adiw	r30, 0x01	; 1
 1ce:	24 96       	adiw	r28, 0x04	; 4
			}
		}
	}
	

for(index=0;index!=MainTimerQueueSize+1;++index)	// Если не находим похожий таймер, то ищем любой пустой	
 1d0:	ef 31       	cpi	r30, 0x1F	; 31
 1d2:	f1 05       	cpc	r31, r1
 1d4:	41 f7       	brne	.-48     	; 0x1a6 <SetTimerTask+0x50>
		if (nointerrupted) 	Enable_Interrupt	// Разрешаем прерывания
		return;									// Выход. 
		}
		
	}												// тут можно сделать return c кодом ошибки - нет свободных таймеров
}
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <TaskManager>:
inline void TaskManager(void)
{
u08		index=0;
TPTR	GoToTask = Idle;		// Инициализируем переменные

Disable_Interrupt				// Запрещаем прерывания!!!
 1dc:	f8 94       	cli
GoToTask = TaskQueue[0];		// Хватаем первое значение из очереди
 1de:	20 91 60 00 	lds	r18, 0x0060
 1e2:	30 91 61 00 	lds	r19, 0x0061

if (GoToTask==Idle) 			// Если там пусто
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	25 38       	cpi	r18, 0x85	; 133
 1ea:	38 07       	cpc	r19, r24
 1ec:	11 f4       	brne	.+4      	; 0x1f2 <TaskManager+0x16>
	{
	Enable_Interrupt			// Разрешаем прерывания
 1ee:	78 94       	sei
 1f0:	08 95       	ret
 1f2:	e0 e6       	ldi	r30, 0x60	; 96
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
	}
else
	{
	for(index=0;index!=TaskQueueSize;index++)	// В противном случае сдвигаем всю очередь
		{
		TaskQueue[index]=TaskQueue[index+1];
 1f6:	82 81       	ldd	r24, Z+2	; 0x02
 1f8:	93 81       	ldd	r25, Z+3	; 0x03
 1fa:	81 93       	st	Z+, r24
 1fc:	91 93       	st	Z+, r25
	Enable_Interrupt			// Разрешаем прерывания
	(Idle)(); 					// Переходим на обработку пустого цикла
	}
else
	{
	for(index=0;index!=TaskQueueSize;index++)	// В противном случае сдвигаем всю очередь
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	ec 39       	cpi	r30, 0x9C	; 156
 202:	f8 07       	cpc	r31, r24
 204:	c1 f7       	brne	.-16     	; 0x1f6 <TaskManager+0x1a>
		{
		TaskQueue[index]=TaskQueue[index+1];
		}

	TaskQueue[TaskQueueSize]= Idle;				// В последнюю запись пихаем затычку
 206:	85 e8       	ldi	r24, 0x85	; 133
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	91 83       	std	Z+1, r25	; 0x01
 20c:	80 83       	st	Z, r24

	Enable_Interrupt							// Разрешаем прерывания
 20e:	78 94       	sei
	(GoToTask)();								// Переходим к задаче
 210:	f9 01       	movw	r30, r18
 212:	09 95       	icall
 214:	08 95       	ret

00000216 <TimerService>:
To DO: Привести к возможности загружать произвольную очередь таймеров. Тогда можно будет создавать их целую прорву. 
А также использовать эту функцию произвольным образом. 
В этом случае не забыть добавить проверку прерывания. 
*/
INLINE void TimerService(void)
{
 216:	0f 93       	push	r16
 218:	1f 93       	push	r17
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	ce e9       	ldi	r28, 0x9E	; 158
 220:	d0 e0       	ldi	r29, 0x00	; 0
u08 index;

for(index=0;index!=MainTimerQueueSize+1;index++)		// Прочесываем очередь таймеров
	{
	if(MainTimer[index].GoToTask == Idle) continue;		// Если нашли пустышку - щелкаем следующую итерацию
 222:	05 e8       	ldi	r16, 0x85	; 133
 224:	10 e0       	ldi	r17, 0x00	; 0
 226:	88 81       	ld	r24, Y
 228:	99 81       	ldd	r25, Y+1	; 0x01
 22a:	20 e0       	ldi	r18, 0x00	; 0
 22c:	85 38       	cpi	r24, 0x85	; 133
 22e:	92 07       	cpc	r25, r18
 230:	71 f0       	breq	.+28     	; 0x24e <TimerService+0x38>

	if(MainTimer[index].Time !=1)						// Если таймер не выщелкал, то щелкаем еще раз. 
 232:	2a 81       	ldd	r18, Y+2	; 0x02
 234:	3b 81       	ldd	r19, Y+3	; 0x03
 236:	21 30       	cpi	r18, 0x01	; 1
 238:	31 05       	cpc	r19, r1
 23a:	29 f0       	breq	.+10     	; 0x246 <TimerService+0x30>
		{												// To Do: Вычислить по тактам, что лучше !=1 или !=0. 
		MainTimer[index].Time --;						// Уменьшаем число в ячейке если не конец.
 23c:	21 50       	subi	r18, 0x01	; 1
 23e:	30 40       	sbci	r19, 0x00	; 0
 240:	3b 83       	std	Y+3, r19	; 0x03
 242:	2a 83       	std	Y+2, r18	; 0x02
 244:	04 c0       	rjmp	.+8      	; 0x24e <TimerService+0x38>
		}
	else
		{
		SetTask(MainTimer[index].GoToTask);				// Дощелкали до нуля? Пихаем в очередь задачу
 246:	0e 94 86 00 	call	0x10c	; 0x10c <SetTask>
		MainTimer[index].GoToTask = Idle;				// А в ячейку пишем затычку
 24a:	19 83       	std	Y+1, r17	; 0x01
 24c:	08 83       	st	Y, r16
 24e:	24 96       	adiw	r28, 0x04	; 4
*/
INLINE void TimerService(void)
{
u08 index;

for(index=0;index!=MainTimerQueueSize+1;index++)		// Прочесываем очередь таймеров
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	ca 31       	cpi	r28, 0x1A	; 26
 254:	d8 07       	cpc	r29, r24
 256:	39 f7       	brne	.-50     	; 0x226 <TimerService+0x10>
		{
		SetTask(MainTimer[index].GoToTask);				// Дощелкали до нуля? Пихаем в очередь задачу
		MainTimer[index].GoToTask = Idle;				// А в ячейку пишем затычку
		}
	}
}
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	1f 91       	pop	r17
 25e:	0f 91       	pop	r16
 260:	08 95       	ret

00000262 <InitAll>:

inline void InitAll(void)
{

//InitUSART
UBRRL = LO(bauddivider);
 262:	83 e3       	ldi	r24, 0x33	; 51
 264:	89 b9       	out	0x09, r24	; 9
UBRRH = HI(bauddivider);
 266:	10 bc       	out	0x20, r1	; 32
UCSRA = 0;
 268:	1b b8       	out	0x0b, r1	; 11
UCSRB = 1<<RXEN|1<<TXEN|0<<RXCIE|0<<TXCIE|0<<UDRIE;
 26a:	88 e1       	ldi	r24, 0x18	; 24
 26c:	8a b9       	out	0x0a, r24	; 10
UCSRC = 1<<URSEL|1<<UCSZ0|1<<UCSZ1;
 26e:	86 e8       	ldi	r24, 0x86	; 134
 270:	80 bd       	out	0x20, r24	; 32

//InitPort
PORTA = 0xFF;
 272:	8f ef       	ldi	r24, 0xFF	; 255
 274:	8b bb       	out	0x1b, r24	; 27
DDRA = 0xFF;
 276:	8a bb       	out	0x1a, r24	; 26

//Init Interrupts


//Init Timers
TIMSK |= 1<<OCIE0;	
 278:	89 b7       	in	r24, 0x39	; 57
 27a:	82 60       	ori	r24, 0x02	; 2
 27c:	89 bf       	out	0x39, r24	; 57
TCCR0 |= 0x04;
 27e:	83 b7       	in	r24, 0x33	; 51
 280:	84 60       	ori	r24, 0x04	; 4
 282:	83 bf       	out	0x33, r24	; 51

}
 284:	08 95       	ret

00000286 <RunRTOS>:
#include <EERTOSHAL.h>

//RTOS Запуск системного таймера
inline void RunRTOS (void)
{
TCCR2 = 1<<WGM21|4<<CS20; 				// Freq = CK/64 - Установить режим и предделитель
 286:	8c e0       	ldi	r24, 0x0C	; 12
 288:	85 bd       	out	0x25, r24	; 37
										// Автосброс после достижения регистра сравнения
TCNT2 = 0;								// Установить начальное значение счётчиков
 28a:	14 bc       	out	0x24, r1	; 36
OCR2  = LO(TimerDivider); 				// Установить значение в регистр сравнения
 28c:	8d e7       	ldi	r24, 0x7D	; 125
 28e:	83 bd       	out	0x23, r24	; 35
TIMSK |= 1<<OCIE2;						// Разрешаем прерывание RTOS - запуск ОС
 290:	89 b7       	in	r24, 0x39	; 57
 292:	80 68       	ori	r24, 0x80	; 128
 294:	89 bf       	out	0x39, r24	; 57

sei();
 296:	78 94       	sei
}
 298:	08 95       	ret

0000029a <_exit>:
 29a:	f8 94       	cli

0000029c <__stop_program>:
 29c:	ff cf       	rjmp	.-2      	; 0x29c <__stop_program>
